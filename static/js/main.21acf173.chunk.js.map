{"version":3,"sources":["components/search-box/search-box.component.jsx","components/cards/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIC,UAAU,aACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCLLI,G,MAAO,SAAAC,GAAK,OACrB,sBAAKJ,UAAU,iBAAf,UACI,qBACIK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEP,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCNbC,G,MAAW,SAAAP,GAAK,OACzB,qBAAKJ,UAAU,YAAf,SAEMI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCkChBM,G,wDAnCb,aAAe,IAAD,8BACZ,gBAcFf,aAAe,SAAAgB,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvD,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAK,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACJ,SAAUa,S,oBAK5C,WAAU,IAAD,EACyBC,KAAKN,MAA9BR,EADA,EACAA,SAAUK,EADV,EACUA,YACXU,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAC9CA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAElD,OACA,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEF,YAAY,iBACZC,aAAc2B,KAAK3B,eAErB,cAAC,EAAD,CAAUa,SAAYe,W,GA9BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.21acf173.chunk.js","sourcesContent":["import './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input\r\n        className='search-box'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n     />\r\n)","import './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img \r\n            alt='monster'\r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import {Card} from '../cards/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {\r\n          props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n          ))\r\n        }\r\n    </div>\r\n)","import {Component} from 'react'\nimport {SearchBox} from './components/search-box/search-box.component'\nimport {CardList} from './components/card-list/card-list.component'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch (`https://jsonplaceholder.typicode.com/users`)\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = e => this.setState({searchField: e.target.value})\n\n  render() {\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox\n        placeholder='search monster'\n        handleChange={this.handleChange} \n      />\n      <CardList monsters = {filteredMonsters} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}